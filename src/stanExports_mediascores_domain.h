// Generated by rstantools.  Do not edit by hand.

/*
    rstanlm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanlm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanlm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mediascores_domain_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 98> locations_array__ =
  {" (found before start of program)",
  " (in 'mediascores_domain', line 36, column 2 to column 22)",
  " (in 'mediascores_domain', line 37, column 2 to column 16)",
  " (in 'mediascores_domain', line 38, column 2 to column 30)",
  " (in 'mediascores_domain', line 39, column 2 to column 22)",
  " (in 'mediascores_domain', line 40, column 2 to column 30)",
  " (in 'mediascores_domain', line 42, column 2 to column 36)",
  " (in 'mediascores_domain', line 43, column 2 to column 33)",
  " (in 'mediascores_domain', line 44, column 2 to column 33)",
  " (in 'mediascores_domain', line 46, column 2 to column 36)",
  " (in 'mediascores_domain', line 47, column 2 to column 35)",
  " (in 'mediascores_domain', line 48, column 2 to column 35)",
  " (in 'mediascores_domain', line 49, column 2 to column 35)",
  " (in 'mediascores_domain', line 50, column 2 to column 29)",
  " (in 'mediascores_domain', line 53, column 2 to column 55)",
  " (in 'mediascores_domain', line 54, column 2 to column 44)",
  " (in 'mediascores_domain', line 55, column 2 to column 32)",
  " (in 'mediascores_domain', line 56, column 2 to column 69)",
  " (in 'mediascores_domain', line 57, column 2 to column 32)",
  " (in 'mediascores_domain', line 91, column 2 to column 130)",
  " (in 'mediascores_domain', line 92, column 2 to column 133)",
  " (in 'mediascores_domain', line 93, column 2 to column 142)",
  " (in 'mediascores_domain', line 59, column 4 to column 38)",
  " (in 'mediascores_domain', line 60, column 4 to column 51)",
  " (in 'mediascores_domain', line 61, column 4 to column 45)",
  " (in 'mediascores_domain', line 58, column 16 to line 62, column 3)",
  " (in 'mediascores_domain', line 58, column 2 to line 62, column 3)",
  " (in 'mediascores_domain', line 65, column 4 to column 115)",
  " (in 'mediascores_domain', line 64, column 16 to line 66, column 3)",
  " (in 'mediascores_domain', line 64, column 2 to line 66, column 3)",
  " (in 'mediascores_domain', line 70, column 9 to column 10)",
  " (in 'mediascores_domain', line 70, column 12 to column 13)",
  " (in 'mediascores_domain', line 70, column 2 to column 15)",
  " (in 'mediascores_domain', line 71, column 2 to column 28)",
  " (in 'mediascores_domain', line 72, column 2 to column 31)",
  " (in 'mediascores_domain', line 73, column 2 to column 27)",
  " (in 'mediascores_domain', line 74, column 2 to column 31)",
  " (in 'mediascores_domain', line 75, column 2 to column 27)",
  " (in 'mediascores_domain', line 77, column 2 to column 32)",
  " (in 'mediascores_domain', line 78, column 2 to column 32)",
  " (in 'mediascores_domain', line 79, column 2 to column 59)",
  " (in 'mediascores_domain', line 80, column 2 to column 29)",
  " (in 'mediascores_domain', line 81, column 2 to column 40)",
  " (in 'mediascores_domain', line 82, column 2 to column 41)",
  " (in 'mediascores_domain', line 83, column 2 to column 28)",
  " (in 'mediascores_domain', line 84, column 2 to column 40)",
  " (in 'mediascores_domain', line 85, column 2 to line 87, column 54)",
  " (in 'mediascores_domain', line 19, column 2 to column 8)",
  " (in 'mediascores_domain', line 20, column 2 to column 8)",
  " (in 'mediascores_domain', line 21, column 2 to column 8)",
  " (in 'mediascores_domain', line 22, column 12 to column 13)",
  " (in 'mediascores_domain', line 22, column 2 to column 15)",
  " (in 'mediascores_domain', line 23, column 8 to column 9)",
  " (in 'mediascores_domain', line 23, column 11 to column 12)",
  " (in 'mediascores_domain', line 23, column 2 to column 14)",
  " (in 'mediascores_domain', line 24, column 2 to column 17)",
  " (in 'mediascores_domain', line 27, column 21 to column 22)",
  " (in 'mediascores_domain', line 27, column 24 to column 25)",
  " (in 'mediascores_domain', line 27, column 2 to column 27)",
  " (in 'mediascores_domain', line 28, column 11 to column 12)",
  " (in 'mediascores_domain', line 28, column 14 to column 15)",
  " (in 'mediascores_domain', line 28, column 2 to column 17)",
  " (in 'mediascores_domain', line 30, column 6 to column 35)",
  " (in 'mediascores_domain', line 31, column 6 to column 49)",
  " (in 'mediascores_domain', line 29, column 17 to line 32, column 3)",
  " (in 'mediascores_domain', line 29, column 2 to line 32, column 3)",
  " (in 'mediascores_domain', line 36, column 9 to column 10)",
  " (in 'mediascores_domain', line 39, column 9 to column 10)",
  " (in 'mediascores_domain', line 42, column 20 to column 21)",
  " (in 'mediascores_domain', line 46, column 9 to column 10)",
  " (in 'mediascores_domain', line 47, column 9 to column 10)",
  " (in 'mediascores_domain', line 48, column 20 to column 21)",
  " (in 'mediascores_domain', line 49, column 9 to column 10)",
  " (in 'mediascores_domain', line 53, column 9 to column 10)",
  " (in 'mediascores_domain', line 54, column 9 to column 10)",
  " (in 'mediascores_domain', line 55, column 9 to column 10)",
  " (in 'mediascores_domain', line 56, column 9 to column 10)",
  " (in 'mediascores_domain', line 57, column 29 to column 30)",
  " (in 'mediascores_domain', line 91, column 9 to column 10)",
  " (in 'mediascores_domain', line 92, column 9 to column 10)",
  " (in 'mediascores_domain', line 93, column 9 to column 10)",
  " (in 'mediascores_domain', line 3, column 4 to column 30)",
  " (in 'mediascores_domain', line 4, column 11 to column 16)",
  " (in 'mediascores_domain', line 4, column 4 to column 50)",
  " (in 'mediascores_domain', line 5, column 11 to column 16)",
  " (in 'mediascores_domain', line 5, column 4 to column 62)",
  " (in 'mediascores_domain', line 6, column 4 to column 34)",
  " (in 'mediascores_domain', line 7, column 4 to column 33)",
  " (in 'mediascores_domain', line 8, column 4 to column 41)",
  " (in 'mediascores_domain', line 9, column 11 to column 16)",
  " (in 'mediascores_domain', line 9, column 4 to column 27)",
  " (in 'mediascores_domain', line 10, column 4 to column 16)",
  " (in 'mediascores_domain', line 12, column 6 to column 79)",
  " (in 'mediascores_domain', line 11, column 22 to line 13, column 5)",
  " (in 'mediascores_domain', line 11, column 4 to line 13, column 5)",
  " (in 'mediascores_domain', line 14, column 4 to column 71)",
  " (in 'mediascores_domain', line 15, column 4 to column 17)",
  " (in 'mediascores_domain', line 2, column 86 to line 16, column 3)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__>,-1,1>
neg_bin(const T0__& global_par_arg__, const T1__& local_par_arg__,
        const std::vector<T2__>& real_var, const std::vector<int>& int_var,
        std::ostream* pstream__);
struct neg_bin_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                  stan::base_type_t<T1__>, T2__>,-1,1>
  operator()(const T0__& global_par, const T1__& local_par,
             const std::vector<T2__>& real_var, const std::vector<int>&
             int_var, std::ostream* pstream__) const {
    return neg_bin(global_par, local_par, real_var, int_var, pstream__);
  }
};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__>,-1,1>
neg_bin(const T0__& global_par_arg__, const T1__& local_par_arg__,
        const std::vector<T2__>& real_var, const std::vector<int>& int_var,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__>;
  int current_statement__ = 0;
  const auto& global_par = stan::math::to_ref(global_par_arg__);
  const auto& local_par = stan::math::to_ref(local_par_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int map_N = std::numeric_limits<int>::min();
    current_statement__ = 81;
    map_N = stan::math::size(int_var);
    current_statement__ = 82;
    stan::math::validate_non_negative_index("map_alpha", "map_N", map_N);
    Eigen::Matrix<local_scalar_t__,-1,1> map_alpha =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(map_N, DUMMY_VAR__);
    current_statement__ = 83;
    stan::model::assign(map_alpha,
      stan::model::rvalue(global_par, "global_par",
        stan::model::index_min_max(1, map_N)), "assigning variable map_alpha");
    current_statement__ = 84;
    stan::math::validate_non_negative_index("map_theta", "map_N", map_N);
    Eigen::Matrix<local_scalar_t__,-1,1> map_theta =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(map_N, DUMMY_VAR__);
    current_statement__ = 85;
    stan::model::assign(map_theta,
      stan::model::rvalue(global_par, "global_par",
        stan::model::index_min_max((map_N + 1), (map_N * 2))),
      "assigning variable map_theta");
    local_scalar_t__ map_gamma = DUMMY_VAR__;
    current_statement__ = 86;
    map_gamma = stan::model::rvalue(local_par, "local_par",
                  stan::model::index_uni(1));
    local_scalar_t__ map_zeta = DUMMY_VAR__;
    current_statement__ = 87;
    map_zeta = stan::model::rvalue(local_par, "local_par",
                 stan::model::index_uni(2));
    local_scalar_t__ map_omega_domain = DUMMY_VAR__;
    current_statement__ = 88;
    map_omega_domain = stan::model::rvalue(local_par, "local_par",
                         stan::model::index_uni(3));
    current_statement__ = 89;
    stan::math::validate_non_negative_index("lin_pred", "map_N", map_N);
    Eigen::Matrix<local_scalar_t__,-1,1> lin_pred =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(map_N, DUMMY_VAR__);
    local_scalar_t__ ll = DUMMY_VAR__;
    current_statement__ = 91;
    ll = 0;
    current_statement__ = 94;
    for (int i = 1; i <= map_N; ++i) {
      current_statement__ = 92;
      stan::model::assign(lin_pred,
        ((stan::model::rvalue(map_alpha, "map_alpha",
            stan::model::index_uni(i)) + map_gamma) -
        stan::math::square(
          (stan::model::rvalue(map_theta, "map_theta",
             stan::model::index_uni(i)) - map_zeta))),
        "assigning variable lin_pred", stan::model::index_uni(i));
    }
    current_statement__ = 95;
    ll = stan::math::neg_binomial_2_log_lpmf<false>(int_var, lin_pred,
           map_omega_domain);
    current_statement__ = 96;
    return (Eigen::Matrix<local_scalar_t__,-1,1>(1) << ll).finished();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_mediascores_domain final : public model_base_crtp<model_mediascores_domain> {
private:
  int N;
  int M;
  int G;
  std::vector<int> group;
  std::vector<std::vector<int>> Y;
  std::vector<int> anchors;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
public:
  ~model_mediascores_domain() {}
  model_mediascores_domain(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mediascores_domain_namespace::model_mediascores_domain";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 47;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 48;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization", "G", "int",
        std::vector<size_t>{});
      G = std::numeric_limits<int>::min();
      current_statement__ = 49;
      G = context__.vals_i("G")[(1 - 1)];
      current_statement__ = 50;
      stan::math::validate_non_negative_index("group", "N", N);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "group", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      group = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 51;
      group = context__.vals_i("group");
      current_statement__ = 52;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("Y", "M", M);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)});
      Y = std::vector<std::vector<int>>(N,
            std::vector<int>(M, std::numeric_limits<int>::min()));
      {
        std::vector<int> Y_flat__;
        current_statement__ = 54;
        Y_flat__ = context__.vals_i("Y");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 54;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 54;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 54;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 55;
      context__.validate_dims("data initialization", "anchors", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      anchors = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 55;
      anchors = context__.vals_i("anchors");
      current_statement__ = 56;
      stan::math::validate_non_negative_index("x_i", "M", M);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("x_i", "N", N);
      current_statement__ = 58;
      x_i = std::vector<std::vector<int>>(M,
              std::vector<int>(N, std::numeric_limits<int>::min()));
      current_statement__ = 59;
      stan::math::validate_non_negative_index("x_r", "M", M);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("x_r", "N", N);
      current_statement__ = 61;
      x_r = std::vector<std::vector<double>>(M,
              std::vector<double>(N,
                std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 65;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 62;
        stan::model::assign(x_i,
          stan::math::to_array_1d(
            stan::model::rvalue(Y, "Y", stan::model::index_omni(),
              stan::model::index_uni(m))), "assigning variable x_i",
          stan::model::index_uni(m));
        current_statement__ = 63;
        stan::model::assign(x_r,
          stan::math::to_array_1d(stan::math::rep_row_vector(0, N)),
          "assigning variable x_r", stan::model::index_uni(m));
      }
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "x_i", x_i, 0);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("alpha_raw", "N", N);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("gamma_raw", "M", M);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("omega_domain", "M", M);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("theta_unconstrained_raw", "N",
        N);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("theta_mu_unconstrained", "G",
        G);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("theta_sigma", "G", G);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("zeta_unconstrained_raw", "M",
        M);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("alpha", "N", N);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("gamma", "M", M);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("theta_unconstrained", "N", N);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("zeta_unconstrained", "M", M);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("gamma_zeta_omega", "M", M);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("zeta", "M", M);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("theta", "N", N);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("theta_mu", "G", G);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N + 1 + 1 + M + 1 + M + 1 + 1 + N + G + G + M + 1;
  }
  inline std::string model_name() const final {
    return "model_mediascores_domain";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mediascores_domain_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 1;
      alpha_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ alpha_mu = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha_sigma = DUMMY_VAR__;
      current_statement__ = 3;
      alpha_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 4;
      gamma_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      local_scalar_t__ gamma_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_domain =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 6;
      omega_domain = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, M);
      local_scalar_t__ omega_domain_a = DUMMY_VAR__;
      current_statement__ = 7;
      omega_domain_a = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      local_scalar_t__ omega_domain_b = DUMMY_VAR__;
      current_statement__ = 8;
      omega_domain_b = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_unconstrained_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 9;
      theta_unconstrained_raw = in__.template read<
                                  Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 10;
      theta_mu_unconstrained = in__.template read<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>(G);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 11;
      theta_sigma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, G);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_unconstrained_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 12;
      zeta_unconstrained_raw = in__.template read<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      local_scalar_t__ zeta_sigma = DUMMY_VAR__;
      current_statement__ = 13;
      zeta_sigma = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(alpha,
        stan::math::add(alpha_mu,
          stan::math::multiply(alpha_raw, alpha_sigma)),
        "assigning variable alpha");
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(gamma,
        stan::math::multiply(gamma_raw, gamma_sigma),
        "assigning variable gamma");
      Eigen::Matrix<local_scalar_t__,-1,1> theta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(zeta_unconstrained,
        stan::math::multiply(zeta_unconstrained_raw, zeta_sigma),
        "assigning variable zeta_unconstrained");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> gamma_zeta_omega =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__));
      current_statement__ = 26;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 22;
        stan::model::assign(gamma_zeta_omega,
          stan::model::rvalue(gamma, "gamma", stan::model::index_uni(m)),
          "assigning variable gamma_zeta_omega", stan::model::index_uni(m),
          stan::model::index_uni(1));
        current_statement__ = 23;
        stan::model::assign(gamma_zeta_omega,
          stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
            stan::model::index_uni(m)),
          "assigning variable gamma_zeta_omega", stan::model::index_uni(m),
          stan::model::index_uni(2));
        current_statement__ = 24;
        stan::model::assign(gamma_zeta_omega,
          stan::model::rvalue(omega_domain, "omega_domain",
            stan::model::index_uni(m)),
          "assigning variable gamma_zeta_omega", stan::model::index_uni(m),
          stan::model::index_uni(3));
      }
      current_statement__ = 29;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 27;
        stan::model::assign(theta_unconstrained,
          (stan::model::rvalue(theta_mu_unconstrained,
             "theta_mu_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(group, "group", stan::model::index_uni(i))))
          +
          (stan::model::rvalue(theta_unconstrained_raw,
             "theta_unconstrained_raw", stan::model::index_uni(i)) *
          stan::model::rvalue(theta_sigma, "theta_sigma",
            stan::model::index_uni(
              stan::model::rvalue(group, "group", stan::model::index_uni(i)))))),
          "assigning variable theta_unconstrained", stan::model::index_uni(i));
      }
      {
        current_statement__ = 30;
        stan::math::validate_non_negative_index("C", "N", N);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("C", "M", M);
        std::vector<std::vector<local_scalar_t__>> C =
          std::vector<std::vector<local_scalar_t__>>(N,
            std::vector<local_scalar_t__>(M, DUMMY_VAR__));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_mu, 0, 2.5));
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_sigma, 0, 2.5));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_raw, 0, 1));
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_sigma, 0, 2.5));
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_raw, 0, 1));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_domain_a, 0, 5));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_domain_b, 0, 5));
        current_statement__ = 40;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(omega_domain,
                         omega_domain_a, omega_domain_b));
        current_statement__ = 41;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(theta_sigma, 0, 1));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         theta_mu_unconstrained, 0, 1));
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         theta_unconstrained_raw, 0, 1));
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(zeta_sigma, 0, 1));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         zeta_unconstrained_raw, 0, 1));
        current_statement__ = 46;
        lp_accum__.add(stan::math::sum(
                         stan::math::map_rect<1, neg_bin_functor__>(
                           stan::math::append_row(alpha, theta_unconstrained),
                           gamma_zeta_omega, x_r, x_i, pstream__)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mediascores_domain_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha_raw =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double alpha_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      alpha_mu = in__.template read<local_scalar_t__>();
      double alpha_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      alpha_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> gamma_raw =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      gamma_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      double gamma_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      gamma_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> omega_domain =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      omega_domain = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, M);
      double omega_domain_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      omega_domain_a = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      double omega_domain_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      omega_domain_b = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> theta_unconstrained_raw =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      theta_unconstrained_raw = in__.template read<
                                  Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<double,-1,1>::Constant(G,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      theta_mu_unconstrained = in__.template read<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>(G);
      Eigen::Matrix<double,-1,1> theta_sigma =
        Eigen::Matrix<double,-1,1>::Constant(G,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      theta_sigma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, G);
      Eigen::Matrix<double,-1,1> zeta_unconstrained_raw =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      zeta_unconstrained_raw = in__.template read<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      double zeta_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      zeta_sigma = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_unconstrained =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> zeta_unconstrained =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> gamma_zeta_omega =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(3,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(alpha_raw);
      out__.write(alpha_mu);
      out__.write(alpha_sigma);
      out__.write(gamma_raw);
      out__.write(gamma_sigma);
      out__.write(omega_domain);
      out__.write(omega_domain_a);
      out__.write(omega_domain_b);
      out__.write(theta_unconstrained_raw);
      out__.write(theta_mu_unconstrained);
      out__.write(theta_sigma);
      out__.write(zeta_unconstrained_raw);
      out__.write(zeta_sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      stan::model::assign(alpha,
        stan::math::add(alpha_mu,
          stan::math::multiply(alpha_raw, alpha_sigma)),
        "assigning variable alpha");
      current_statement__ = 15;
      stan::model::assign(gamma,
        stan::math::multiply(gamma_raw, gamma_sigma),
        "assigning variable gamma");
      current_statement__ = 17;
      stan::model::assign(zeta_unconstrained,
        stan::math::multiply(zeta_unconstrained_raw, zeta_sigma),
        "assigning variable zeta_unconstrained");
      current_statement__ = 26;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 22;
        stan::model::assign(gamma_zeta_omega,
          stan::model::rvalue(gamma, "gamma", stan::model::index_uni(m)),
          "assigning variable gamma_zeta_omega", stan::model::index_uni(m),
          stan::model::index_uni(1));
        current_statement__ = 23;
        stan::model::assign(gamma_zeta_omega,
          stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
            stan::model::index_uni(m)),
          "assigning variable gamma_zeta_omega", stan::model::index_uni(m),
          stan::model::index_uni(2));
        current_statement__ = 24;
        stan::model::assign(gamma_zeta_omega,
          stan::model::rvalue(omega_domain, "omega_domain",
            stan::model::index_uni(m)),
          "assigning variable gamma_zeta_omega", stan::model::index_uni(m),
          stan::model::index_uni(3));
      }
      current_statement__ = 29;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 27;
        stan::model::assign(theta_unconstrained,
          (stan::model::rvalue(theta_mu_unconstrained,
             "theta_mu_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(group, "group", stan::model::index_uni(i))))
          +
          (stan::model::rvalue(theta_unconstrained_raw,
             "theta_unconstrained_raw", stan::model::index_uni(i)) *
          stan::model::rvalue(theta_sigma, "theta_sigma",
            stan::model::index_uni(
              stan::model::rvalue(group, "group", stan::model::index_uni(i)))))),
          "assigning variable theta_unconstrained", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(alpha);
        out__.write(gamma);
        out__.write(theta_unconstrained);
        out__.write(zeta_unconstrained);
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(gamma_zeta_omega[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> zeta =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      stan::model::assign(zeta,
        (stan::math::logical_lt(
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(1)))),
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(2))))) ? stan::math::eval(
                                                   zeta_unconstrained) : 
        stan::math::eval(stan::math::multiply(zeta_unconstrained, -1))),
        "assigning variable zeta");
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      stan::model::assign(theta,
        (stan::math::logical_lt(
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(1)))),
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(2))))) ? stan::math::eval(
                                                   theta_unconstrained) : 
        stan::math::eval(stan::math::multiply(theta_unconstrained, -1))),
        "assigning variable theta");
      Eigen::Matrix<double,-1,1> theta_mu =
        Eigen::Matrix<double,-1,1>::Constant(G,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      stan::model::assign(theta_mu,
        (stan::math::logical_lt(
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(1)))),
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(2))))) ? stan::math::eval(
                                                   theta_mu_unconstrained) : 
        stan::math::eval(stan::math::multiply(theta_mu_unconstrained, -1))),
        "assigning variable theta_mu");
      out__.write(zeta);
      out__.write(theta);
      out__.write(theta_mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable alpha_raw");
      out__.write(alpha_raw);
      local_scalar_t__ alpha_mu = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_mu = in__.read<local_scalar_t__>();
      out__.write(alpha_mu);
      local_scalar_t__ alpha_sigma = DUMMY_VAR__;
      current_statement__ = 3;
      alpha_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(gamma_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable gamma_raw");
      out__.write(gamma_raw);
      local_scalar_t__ gamma_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_domain =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(omega_domain,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable omega_domain");
      out__.write_free_lb(0, omega_domain);
      local_scalar_t__ omega_domain_a = DUMMY_VAR__;
      current_statement__ = 7;
      omega_domain_a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_domain_a);
      local_scalar_t__ omega_domain_b = DUMMY_VAR__;
      current_statement__ = 8;
      omega_domain_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_domain_b);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_unconstrained_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(theta_unconstrained_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable theta_unconstrained_raw");
      out__.write(theta_unconstrained_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(theta_mu_unconstrained,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(G),
        "assigning variable theta_mu_unconstrained");
      out__.write(theta_mu_unconstrained);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(theta_sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(G),
        "assigning variable theta_sigma");
      out__.write_free_lb(0, theta_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_unconstrained_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(zeta_unconstrained_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable zeta_unconstrained_raw");
      out__.write(zeta_unconstrained_raw);
      local_scalar_t__ zeta_sigma = DUMMY_VAR__;
      current_statement__ = 13;
      zeta_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, zeta_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_raw",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha_mu",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "gamma_raw",
        "double", std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "gamma_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "omega_domain",
        "double", std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "omega_domain_a",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "omega_domain_b",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization",
        "theta_unconstrained_raw", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "theta_mu_unconstrained", "double",
        std::vector<size_t>{static_cast<size_t>(G)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "theta_sigma",
        "double", std::vector<size_t>{static_cast<size_t>(G)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "zeta_unconstrained_raw", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "zeta_sigma",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_raw_flat__;
        current_statement__ = 1;
        alpha_raw_flat__ = context__.vals_r("alpha_raw");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alpha_raw, alpha_raw_flat__[(pos__ - 1)],
            "assigning variable alpha_raw", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha_raw);
      local_scalar_t__ alpha_mu = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_mu = context__.vals_r("alpha_mu")[(1 - 1)];
      out__.write(alpha_mu);
      local_scalar_t__ alpha_sigma = DUMMY_VAR__;
      current_statement__ = 3;
      alpha_sigma = context__.vals_r("alpha_sigma")[(1 - 1)];
      out__.write_free_lb(0, alpha_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_raw_flat__;
        current_statement__ = 4;
        gamma_raw_flat__ = context__.vals_r("gamma_raw");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(gamma_raw, gamma_raw_flat__[(pos__ - 1)],
            "assigning variable gamma_raw", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma_raw);
      local_scalar_t__ gamma_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma_sigma = context__.vals_r("gamma_sigma")[(1 - 1)];
      out__.write_free_lb(0, gamma_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_domain =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> omega_domain_flat__;
        current_statement__ = 6;
        omega_domain_flat__ = context__.vals_r("omega_domain");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(omega_domain, omega_domain_flat__[(pos__ - 1)],
            "assigning variable omega_domain", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, omega_domain);
      local_scalar_t__ omega_domain_a = DUMMY_VAR__;
      current_statement__ = 7;
      omega_domain_a = context__.vals_r("omega_domain_a")[(1 - 1)];
      out__.write_free_lb(0, omega_domain_a);
      local_scalar_t__ omega_domain_b = DUMMY_VAR__;
      current_statement__ = 8;
      omega_domain_b = context__.vals_r("omega_domain_b")[(1 - 1)];
      out__.write_free_lb(0, omega_domain_b);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_unconstrained_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_unconstrained_raw_flat__;
        current_statement__ = 9;
        theta_unconstrained_raw_flat__ = context__.vals_r("theta_unconstrained_raw");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(theta_unconstrained_raw,
            theta_unconstrained_raw_flat__[(pos__ - 1)],
            "assigning variable theta_unconstrained_raw",
            stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(theta_unconstrained_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_mu_unconstrained_flat__;
        current_statement__ = 10;
        theta_mu_unconstrained_flat__ = context__.vals_r("theta_mu_unconstrained");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(theta_mu_unconstrained,
            theta_mu_unconstrained_flat__[(pos__ - 1)],
            "assigning variable theta_mu_unconstrained",
            stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(theta_mu_unconstrained);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_sigma_flat__;
        current_statement__ = 11;
        theta_sigma_flat__ = context__.vals_r("theta_sigma");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(theta_sigma, theta_sigma_flat__[(pos__ - 1)],
            "assigning variable theta_sigma", stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, theta_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_unconstrained_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zeta_unconstrained_raw_flat__;
        current_statement__ = 12;
        zeta_unconstrained_raw_flat__ = context__.vals_r("zeta_unconstrained_raw");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(zeta_unconstrained_raw,
            zeta_unconstrained_raw_flat__[(pos__ - 1)],
            "assigning variable zeta_unconstrained_raw",
            stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(zeta_unconstrained_raw);
      local_scalar_t__ zeta_sigma = DUMMY_VAR__;
      current_statement__ = 13;
      zeta_sigma = context__.vals_r("zeta_sigma")[(1 - 1)];
      out__.write_free_lb(0, zeta_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_raw", "alpha_mu",
                "alpha_sigma", "gamma_raw", "gamma_sigma", "omega_domain",
                "omega_domain_a", "omega_domain_b",
                "theta_unconstrained_raw", "theta_mu_unconstrained",
                "theta_sigma", "zeta_unconstrained_raw", "zeta_sigma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"alpha", "gamma", "theta_unconstrained", "zeta_unconstrained",
             "gamma_zeta_omega"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"zeta", "theta", "theta_mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(G)},
                std::vector<size_t>{static_cast<size_t>(G)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(3)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(G)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha_mu");
    param_names__.emplace_back(std::string() + "alpha_sigma");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "gamma_sigma");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_domain" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_domain_a");
    param_names__.emplace_back(std::string() + "omega_domain_b");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_unconstrained_raw" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu_unconstrained" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_unconstrained_raw" +
        '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "zeta_sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_unconstrained" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "zeta_unconstrained" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "gamma_zeta_omega" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "zeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha_mu");
    param_names__.emplace_back(std::string() + "alpha_sigma");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_raw" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "gamma_sigma");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_domain" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_domain_a");
    param_names__.emplace_back(std::string() + "omega_domain_b");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_unconstrained_raw" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu_unconstrained" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_unconstrained_raw" +
        '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "zeta_sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_unconstrained" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "zeta_unconstrained" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "gamma_zeta_omega" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "zeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"alpha_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"gamma_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"omega_domain_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_unconstrained_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"theta_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"zeta_unconstrained_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"zeta_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_zeta_omega\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"alpha_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"gamma_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"omega_domain_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_unconstrained_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"theta_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"zeta_unconstrained_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"zeta_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_zeta_omega\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((N + 1) + 1) + M) + 1) + M) + 1) +
      1) + N) + G) + G) + M) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((N + M)
      + N) + M) + (M * 3)));
    const size_t num_gen_quantities = emit_generated_quantities * (((M + N) +
      G));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((N + 1) + 1) + M) + 1) + M) + 1) +
      1) + N) + G) + G) + M) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((N + M)
      + N) + M) + (M * 3)));
    const size_t num_gen_quantities = emit_generated_quantities * (((M + N) +
      G));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mediascores_domain_namespace::model_mediascores_domain;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mediascores_domain_namespace::profiles__;
}
#endif
STAN_REGISTER_MAP_RECT(1, model_mediascores_domain_namespace::neg_bin_functor__)
#endif
