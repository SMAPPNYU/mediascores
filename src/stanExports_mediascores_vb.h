// Generated by rstantools.  Do not edit by hand.

/*
    rstanlm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanlm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanlm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mediascores_vb_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 72> locations_array__ =
  {" (found before start of program)",
  " (in 'mediascores_vb', line 11, column 2 to column 18)",
  " (in 'mediascores_vb', line 12, column 2 to column 16)",
  " (in 'mediascores_vb', line 13, column 2 to column 30)",
  " (in 'mediascores_vb', line 14, column 2 to column 18)",
  " (in 'mediascores_vb', line 15, column 2 to column 30)",
  " (in 'mediascores_vb', line 17, column 2 to column 34)",
  " (in 'mediascores_vb', line 18, column 2 to column 31)",
  " (in 'mediascores_vb', line 19, column 2 to column 31)",
  " (in 'mediascores_vb', line 21, column 2 to column 36)",
  " (in 'mediascores_vb', line 22, column 2 to column 33)",
  " (in 'mediascores_vb', line 23, column 2 to column 33)",
  " (in 'mediascores_vb', line 25, column 2 to column 32)",
  " (in 'mediascores_vb', line 26, column 2 to column 35)",
  " (in 'mediascores_vb', line 27, column 2 to column 35)",
  " (in 'mediascores_vb', line 28, column 2 to column 31)",
  " (in 'mediascores_vb', line 29, column 2 to column 29)",
  " (in 'mediascores_vb', line 66, column 2 to column 130)",
  " (in 'mediascores_vb', line 67, column 2 to column 133)",
  " (in 'mediascores_vb', line 68, column 2 to column 142)",
  " (in 'mediascores_vb', line 34, column 9 to column 10)",
  " (in 'mediascores_vb', line 34, column 2 to column 21)",
  " (in 'mediascores_vb', line 35, column 9 to column 10)",
  " (in 'mediascores_vb', line 35, column 2 to column 18)",
  " (in 'mediascores_vb', line 36, column 9 to column 10)",
  " (in 'mediascores_vb', line 36, column 12 to column 13)",
  " (in 'mediascores_vb', line 36, column 2 to column 15)",
  " (in 'mediascores_vb', line 37, column 2 to column 28)",
  " (in 'mediascores_vb', line 38, column 2 to column 31)",
  " (in 'mediascores_vb', line 39, column 2 to column 40)",
  " (in 'mediascores_vb', line 40, column 2 to column 31)",
  " (in 'mediascores_vb', line 41, column 2 to column 33)",
  " (in 'mediascores_vb', line 43, column 2 to column 30)",
  " (in 'mediascores_vb', line 44, column 2 to column 30)",
  " (in 'mediascores_vb', line 45, column 2 to column 53)",
  " (in 'mediascores_vb', line 46, column 2 to column 32)",
  " (in 'mediascores_vb', line 47, column 2 to column 32)",
  " (in 'mediascores_vb', line 48, column 2 to column 59)",
  " (in 'mediascores_vb', line 49, column 2 to column 29)",
  " (in 'mediascores_vb', line 50, column 2 to column 40)",
  " (in 'mediascores_vb', line 52, column 4 to column 100)",
  " (in 'mediascores_vb', line 51, column 16 to line 53, column 3)",
  " (in 'mediascores_vb', line 51, column 2 to line 53, column 3)",
  " (in 'mediascores_vb', line 54, column 2 to column 28)",
  " (in 'mediascores_vb', line 55, column 2 to column 45)",
  " (in 'mediascores_vb', line 58, column 6 to column 97)",
  " (in 'mediascores_vb', line 59, column 6 to column 49)",
  " (in 'mediascores_vb', line 57, column 18 to line 60, column 5)",
  " (in 'mediascores_vb', line 57, column 4 to line 60, column 5)",
  " (in 'mediascores_vb', line 61, column 6 to column 51)",
  " (in 'mediascores_vb', line 56, column 16 to line 62, column 3)",
  " (in 'mediascores_vb', line 56, column 2 to line 62, column 3)",
  " (in 'mediascores_vb', line 2, column 2 to column 8)",
  " (in 'mediascores_vb', line 3, column 2 to column 8)",
  " (in 'mediascores_vb', line 4, column 2 to column 8)",
  " (in 'mediascores_vb', line 5, column 12 to column 13)",
  " (in 'mediascores_vb', line 5, column 2 to column 15)",
  " (in 'mediascores_vb', line 6, column 8 to column 9)",
  " (in 'mediascores_vb', line 6, column 11 to column 12)",
  " (in 'mediascores_vb', line 6, column 2 to column 14)",
  " (in 'mediascores_vb', line 7, column 2 to column 17)",
  " (in 'mediascores_vb', line 11, column 9 to column 10)",
  " (in 'mediascores_vb', line 14, column 9 to column 10)",
  " (in 'mediascores_vb', line 17, column 20 to column 21)",
  " (in 'mediascores_vb', line 21, column 20 to column 21)",
  " (in 'mediascores_vb', line 25, column 9 to column 10)",
  " (in 'mediascores_vb', line 26, column 9 to column 10)",
  " (in 'mediascores_vb', line 27, column 20 to column 21)",
  " (in 'mediascores_vb', line 28, column 9 to column 10)",
  " (in 'mediascores_vb', line 66, column 9 to column 10)",
  " (in 'mediascores_vb', line 67, column 9 to column 10)",
  " (in 'mediascores_vb', line 68, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_mediascores_vb final : public model_base_crtp<model_mediascores_vb> {
private:
  int N;
  int M;
  int G;
  std::vector<int> group;
  std::vector<std::vector<int>> Y;
  std::vector<int> anchors;
public:
  ~model_mediascores_vb() {}
  model_mediascores_vb(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mediascores_vb_namespace::model_mediascores_vb";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 52;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 52;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 53;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization", "G", "int",
        std::vector<size_t>{});
      G = std::numeric_limits<int>::min();
      current_statement__ = 54;
      G = context__.vals_i("G")[(1 - 1)];
      current_statement__ = 55;
      stan::math::validate_non_negative_index("group", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "group", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      group = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 56;
      group = context__.vals_i("group");
      current_statement__ = 57;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("Y", "M", M);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)});
      Y = std::vector<std::vector<int>>(N,
            std::vector<int>(M, std::numeric_limits<int>::min()));
      {
        std::vector<int> Y_flat__;
        current_statement__ = 59;
        Y_flat__ = context__.vals_i("Y");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 59;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 59;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 59;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 60;
      context__.validate_dims("data initialization", "anchors", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      anchors = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 60;
      anchors = context__.vals_i("anchors");
      current_statement__ = 61;
      stan::math::validate_non_negative_index("alpha", "N", N);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("gamma", "M", M);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("omega_user", "N", N);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("omega_domain", "M", M);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("theta_unconstrained", "N", N);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("theta_mu_unconstrained", "G",
        G);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("theta_sigma", "G", G);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("zeta_unconstrained", "M", M);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("zeta", "M", M);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("theta", "N", N);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("theta_mu", "G", G);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N + 1 + 1 + M + 1 + N + 1 + 1 + M + 1 + 1 + N + G + G +
      M + 1;
  }
  inline std::string model_name() const final {
    return "model_mediascores_vb";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mediascores_vb_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ alpha_mu = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha_sigma = DUMMY_VAR__;
      current_statement__ = 3;
      alpha_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      local_scalar_t__ gamma_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_user =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      omega_user = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, N);
      local_scalar_t__ omega_user_a = DUMMY_VAR__;
      current_statement__ = 7;
      omega_user_a = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      local_scalar_t__ omega_user_b = DUMMY_VAR__;
      current_statement__ = 8;
      omega_user_b = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_domain =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 9;
      omega_domain = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, M);
      local_scalar_t__ omega_domain_a = DUMMY_VAR__;
      current_statement__ = 10;
      omega_domain_a = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      local_scalar_t__ omega_domain_b = DUMMY_VAR__;
      current_statement__ = 11;
      omega_domain_b = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 12;
      theta_unconstrained = in__.template read<
                              Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 13;
      theta_mu_unconstrained = in__.template read<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>(G);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 14;
      theta_sigma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, G);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 15;
      zeta_unconstrained = in__.template read<
                             Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      local_scalar_t__ zeta_sigma = DUMMY_VAR__;
      current_statement__ = 16;
      zeta_sigma = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      {
        current_statement__ = 20;
        stan::math::validate_non_negative_index("lin_pred", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> lin_pred =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("omega", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> omega =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 24;
        stan::math::validate_non_negative_index("C", "N", N);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("C", "M", M);
        std::vector<std::vector<local_scalar_t__>> C =
          std::vector<std::vector<local_scalar_t__>>(N,
            std::vector<local_scalar_t__>(M, DUMMY_VAR__));
        current_statement__ = 27;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_mu, 0, 2.5));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_sigma, 0, 2.5));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, alpha_mu,
                         alpha_sigma));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_sigma, 0, 2.5));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma, 0,
                         gamma_sigma));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_user_a, 0, 5));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_user_b, 0, 5));
        current_statement__ = 34;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(omega_user,
                         omega_user_a, omega_user_b));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_domain_a, 0, 5));
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_domain_b, 0, 5));
        current_statement__ = 37;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(omega_domain,
                         omega_domain_a, omega_domain_b));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(theta_sigma, 0, 1));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         theta_mu_unconstrained, 0, 1));
        current_statement__ = 42;
        for (int g = 1; g <= N; ++g) {
          current_statement__ = 40;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(theta_unconstrained,
                             "theta_unconstrained",
                             stan::model::index_uni(
                               stan::model::rvalue(group, "group",
                                 stan::model::index_uni(g)))),
                           stan::model::rvalue(theta_mu_unconstrained,
                             "theta_mu_unconstrained",
                             stan::model::index_uni(
                               stan::model::rvalue(group, "group",
                                 stan::model::index_uni(g)))),
                           stan::model::rvalue(theta_sigma, "theta_sigma",
                             stan::model::index_uni(
                               stan::model::rvalue(group, "group",
                                 stan::model::index_uni(g))))));
        }
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(zeta_sigma, 0, 1));
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(zeta_unconstrained,
                         0, zeta_sigma));
        current_statement__ = 51;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 48;
          for (int j = 1; j <= N; ++j) {
            current_statement__ = 45;
            stan::model::assign(lin_pred,
              ((stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))
              +
              stan::model::rvalue(gamma, "gamma", stan::model::index_uni(m)))
              -
              stan::math::square(
                (stan::model::rvalue(theta_unconstrained,
                   "theta_unconstrained", stan::model::index_uni(j)) -
                stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
                  stan::model::index_uni(m))))),
              "assigning variable lin_pred", stan::model::index_uni(j));
            current_statement__ = 46;
            stan::model::assign(omega,
              (stan::model::rvalue(omega_domain, "omega_domain",
                 stan::model::index_uni(m)) *
              stan::model::rvalue(omega_user, "omega_user",
                stan::model::index_uni(j))), "assigning variable omega",
              stan::model::index_uni(j));
          }
          current_statement__ = 49;
          lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<propto__>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_omni(),
                             stan::model::index_uni(m)), lin_pred, omega));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mediascores_vb_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double alpha_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      alpha_mu = in__.template read<local_scalar_t__>();
      double alpha_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      alpha_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      double gamma_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      gamma_sigma = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> omega_user =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      omega_user = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, N);
      double omega_user_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      omega_user_a = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      double omega_user_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      omega_user_b = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> omega_domain =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      omega_domain = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, M);
      double omega_domain_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      omega_domain_a = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      double omega_domain_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      omega_domain_b = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> theta_unconstrained =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      theta_unconstrained = in__.template read<
                              Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<double,-1,1>::Constant(G,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      theta_mu_unconstrained = in__.template read<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>(G);
      Eigen::Matrix<double,-1,1> theta_sigma =
        Eigen::Matrix<double,-1,1>::Constant(G,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      theta_sigma = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, G);
      Eigen::Matrix<double,-1,1> zeta_unconstrained =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      zeta_unconstrained = in__.template read<
                             Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      double zeta_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      zeta_sigma = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      out__.write(alpha);
      out__.write(alpha_mu);
      out__.write(alpha_sigma);
      out__.write(gamma);
      out__.write(gamma_sigma);
      out__.write(omega_user);
      out__.write(omega_user_a);
      out__.write(omega_user_b);
      out__.write(omega_domain);
      out__.write(omega_domain_a);
      out__.write(omega_domain_b);
      out__.write(theta_unconstrained);
      out__.write(theta_mu_unconstrained);
      out__.write(theta_sigma);
      out__.write(zeta_unconstrained);
      out__.write(zeta_sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> zeta =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      stan::model::assign(zeta,
        (stan::math::logical_lt(
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(1)))),
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(2))))) ? stan::math::eval(
                                                   zeta_unconstrained) : 
        stan::math::eval(stan::math::multiply(zeta_unconstrained, -1))),
        "assigning variable zeta");
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      stan::model::assign(theta,
        (stan::math::logical_lt(
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(1)))),
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(2))))) ? stan::math::eval(
                                                   theta_unconstrained) : 
        stan::math::eval(stan::math::multiply(theta_unconstrained, -1))),
        "assigning variable theta");
      Eigen::Matrix<double,-1,1> theta_mu =
        Eigen::Matrix<double,-1,1>::Constant(G,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      stan::model::assign(theta_mu,
        (stan::math::logical_lt(
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(1)))),
           stan::model::rvalue(zeta_unconstrained, "zeta_unconstrained",
             stan::model::index_uni(
               stan::model::rvalue(anchors, "anchors",
                 stan::model::index_uni(2))))) ? stan::math::eval(
                                                   theta_mu_unconstrained) : 
        stan::math::eval(stan::math::multiply(theta_mu_unconstrained, -1))),
        "assigning variable theta_mu");
      out__.write(zeta);
      out__.write(theta);
      out__.write(theta_mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable alpha");
      out__.write(alpha);
      local_scalar_t__ alpha_mu = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_mu = in__.read<local_scalar_t__>();
      out__.write(alpha_mu);
      local_scalar_t__ alpha_sigma = DUMMY_VAR__;
      current_statement__ = 3;
      alpha_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable gamma");
      out__.write(gamma);
      local_scalar_t__ gamma_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_user =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(omega_user,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable omega_user");
      out__.write_free_lb(0, omega_user);
      local_scalar_t__ omega_user_a = DUMMY_VAR__;
      current_statement__ = 7;
      omega_user_a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_user_a);
      local_scalar_t__ omega_user_b = DUMMY_VAR__;
      current_statement__ = 8;
      omega_user_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_user_b);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_domain =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(omega_domain,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable omega_domain");
      out__.write_free_lb(0, omega_domain);
      local_scalar_t__ omega_domain_a = DUMMY_VAR__;
      current_statement__ = 10;
      omega_domain_a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_domain_a);
      local_scalar_t__ omega_domain_b = DUMMY_VAR__;
      current_statement__ = 11;
      omega_domain_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_domain_b);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(theta_unconstrained,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable theta_unconstrained");
      out__.write(theta_unconstrained);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(theta_mu_unconstrained,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(G),
        "assigning variable theta_mu_unconstrained");
      out__.write(theta_mu_unconstrained);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(theta_sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(G),
        "assigning variable theta_sigma");
      out__.write_free_lb(0, theta_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(zeta_unconstrained,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable zeta_unconstrained");
      out__.write(zeta_unconstrained);
      local_scalar_t__ zeta_sigma = DUMMY_VAR__;
      current_statement__ = 16;
      zeta_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, zeta_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha_mu",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "gamma_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "omega_user",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "omega_user_a",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "omega_user_b",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "omega_domain",
        "double", std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "omega_domain_a",
        "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "omega_domain_b",
        "double", std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "theta_unconstrained", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization",
        "theta_mu_unconstrained", "double",
        std::vector<size_t>{static_cast<size_t>(G)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "theta_sigma",
        "double", std::vector<size_t>{static_cast<size_t>(G)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization",
        "zeta_unconstrained", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization", "zeta_sigma",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 1;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      local_scalar_t__ alpha_mu = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_mu = context__.vals_r("alpha_mu")[(1 - 1)];
      out__.write(alpha_mu);
      local_scalar_t__ alpha_sigma = DUMMY_VAR__;
      current_statement__ = 3;
      alpha_sigma = context__.vals_r("alpha_sigma")[(1 - 1)];
      out__.write_free_lb(0, alpha_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 4;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma);
      local_scalar_t__ gamma_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma_sigma = context__.vals_r("gamma_sigma")[(1 - 1)];
      out__.write_free_lb(0, gamma_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_user =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> omega_user_flat__;
        current_statement__ = 6;
        omega_user_flat__ = context__.vals_r("omega_user");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(omega_user, omega_user_flat__[(pos__ - 1)],
            "assigning variable omega_user", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, omega_user);
      local_scalar_t__ omega_user_a = DUMMY_VAR__;
      current_statement__ = 7;
      omega_user_a = context__.vals_r("omega_user_a")[(1 - 1)];
      out__.write_free_lb(0, omega_user_a);
      local_scalar_t__ omega_user_b = DUMMY_VAR__;
      current_statement__ = 8;
      omega_user_b = context__.vals_r("omega_user_b")[(1 - 1)];
      out__.write_free_lb(0, omega_user_b);
      Eigen::Matrix<local_scalar_t__,-1,1> omega_domain =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> omega_domain_flat__;
        current_statement__ = 9;
        omega_domain_flat__ = context__.vals_r("omega_domain");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(omega_domain, omega_domain_flat__[(pos__ - 1)],
            "assigning variable omega_domain", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, omega_domain);
      local_scalar_t__ omega_domain_a = DUMMY_VAR__;
      current_statement__ = 10;
      omega_domain_a = context__.vals_r("omega_domain_a")[(1 - 1)];
      out__.write_free_lb(0, omega_domain_a);
      local_scalar_t__ omega_domain_b = DUMMY_VAR__;
      current_statement__ = 11;
      omega_domain_b = context__.vals_r("omega_domain_b")[(1 - 1)];
      out__.write_free_lb(0, omega_domain_b);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_unconstrained_flat__;
        current_statement__ = 12;
        theta_unconstrained_flat__ = context__.vals_r("theta_unconstrained");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(theta_unconstrained,
            theta_unconstrained_flat__[(pos__ - 1)],
            "assigning variable theta_unconstrained",
            stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(theta_unconstrained);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_mu_unconstrained_flat__;
        current_statement__ = 13;
        theta_mu_unconstrained_flat__ = context__.vals_r("theta_mu_unconstrained");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          current_statement__ = 13;
          stan::model::assign(theta_mu_unconstrained,
            theta_mu_unconstrained_flat__[(pos__ - 1)],
            "assigning variable theta_mu_unconstrained",
            stan::model::index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(theta_mu_unconstrained);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(G, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_sigma_flat__;
        current_statement__ = 14;
        theta_sigma_flat__ = context__.vals_r("theta_sigma");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(theta_sigma, theta_sigma_flat__[(pos__ - 1)],
            "assigning variable theta_sigma", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, theta_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> zeta_unconstrained =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zeta_unconstrained_flat__;
        current_statement__ = 15;
        zeta_unconstrained_flat__ = context__.vals_r("zeta_unconstrained");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 15;
          stan::model::assign(zeta_unconstrained,
            zeta_unconstrained_flat__[(pos__ - 1)],
            "assigning variable zeta_unconstrained",
            stan::model::index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(zeta_unconstrained);
      local_scalar_t__ zeta_sigma = DUMMY_VAR__;
      current_statement__ = 16;
      zeta_sigma = context__.vals_r("zeta_sigma")[(1 - 1)];
      out__.write_free_lb(0, zeta_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha", "alpha_mu", "alpha_sigma",
                "gamma", "gamma_sigma", "omega_user", "omega_user_a",
                "omega_user_b", "omega_domain", "omega_domain_a",
                "omega_domain_b", "theta_unconstrained",
                "theta_mu_unconstrained", "theta_sigma",
                "zeta_unconstrained", "zeta_sigma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"zeta", "theta", "theta_mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(G)},
                std::vector<size_t>{static_cast<size_t>(G)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(G)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha_mu");
    param_names__.emplace_back(std::string() + "alpha_sigma");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "gamma_sigma");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_user" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_user_a");
    param_names__.emplace_back(std::string() + "omega_user_b");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_domain" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_domain_a");
    param_names__.emplace_back(std::string() + "omega_domain_b");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_unconstrained" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu_unconstrained" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_unconstrained" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "zeta_sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "zeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha_mu");
    param_names__.emplace_back(std::string() + "alpha_sigma");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "gamma_sigma");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_user" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_user_a");
    param_names__.emplace_back(std::string() + "omega_user_b");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "omega_domain" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_domain_a");
    param_names__.emplace_back(std::string() + "omega_domain_b");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_unconstrained" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu_unconstrained" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "zeta_unconstrained" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "zeta_sigma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "zeta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= G; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"alpha_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"gamma_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_user\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"omega_user_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_user_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"omega_domain_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"theta_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"zeta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"zeta_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"alpha_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"gamma_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_user\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"omega_user_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_user_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"omega_domain_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega_domain_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"theta_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"parameters\"},{\"name\":\"zeta_unconstrained\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"zeta_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(G) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((N + 1) + 1) + M) + 1) + N) +
      1) + 1) + M) + 1) + 1) + N) + G) + G) + M) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((M + N) +
      G));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((N + 1) + 1) + M) + 1) + N) +
      1) + 1) + M) + 1) + 1) + N) + G) + G) + M) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((M + N) +
      G));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mediascores_vb_namespace::model_mediascores_vb;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mediascores_vb_namespace::profiles__;
}
#endif
#endif
